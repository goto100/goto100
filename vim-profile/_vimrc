"vim: set fenc=utf-8:
set nocompatible
source $VIMRUNTIME/vimrc_example.vim
"source $VIMRUNTIME/mswin.vim
"behave mswin

let $Lang="zh_CN.UTF-8"

set encoding=utf-8
so $VIMRUNTIME/delmenu.vim
so $VIMRUNTIME/menu.vim

set fileencoding=utf-8
set fileencodings=utf-8,gb2312,gbk,gb18030,big5
"set fileencodings+=ucs-bom

colorscheme desert
syn on

" 高亮搜索结果
set incsearch
set hlsearch

" 行号
set number

set linebreak
set wrap
set so=1
set sidescrolloff=1
set sidescroll=1
set makeprg=make
set tabstop=4
set shiftwidth=4
set fdc=4 
set fdm=syntax
set cindent
set autoindent
set nocompatible
set smarttab
set linespace=1
set fsync
set nocursorline
set nocursorcolumn
set updatecount=819222
set undolevels=819222
set history=819222
set nobackup
set sessionoptions+=unix,slash
set fileformat=unix
set foldmethod=marker
set modelines=10
set modeline
set guifont=Courier_New:h12:cANSI

map <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>
map <C-Tab> <Esc>:tabnext<CR>
map <C-S-Tab> <Esc>:tabprevious<CR>
map <C-t> <Esc>:tabnew<CR>

highlight CurrentLine guibg=gray25
au! Cursorhold * exe 'match CurrentLine /\%' . line('.') . 'l.*/'
set ut=100

au GUIEnter * simalt ~x "Window Maximize

command -nargs=0 Svndiff :call Svndiff()
function Svndiff()
"   execute '!svn diff ' . expand('%:p')
	silent execute '!svn cat ' . expand('%:p') . ' > c:\WINDOWS\Temp\svndiff.tmp'
	execute ':vert diffsplit c:\WINDOWS\Temp\svndiff.tmp'
endfunction

command -nargs=1 Svncommit :call Svncommit(<f-args>)
function Svncommit(msg)
	w
	execute '!svn commit -m "' . iconv(a:msg, &enc, "chinese") . '" "' . expand('%:p') .'"'
endfunction

command -nargs=0 Svnupdate :call Svnupdate()
function Svnupdate()
	execute '!svn update "' . expand('%:p') . '"'
endfunction

command -nargs=0 Svnlog :call Svnlog()
function Svnlog()
	execute '!svn log "' . expand('%:p') '"'
endfunction 

command To211 :call To211()
function To211()
	let sfxcl = '"C:\Program Files\VanDyke Software\SecureFX\sfxcl"'
	let mappings = []
	let path = expand('%:p')
	call add(mappings, { 'src': 'D:\works\xn.trunk\www\', 'path': '/opt/www/' } )
	call add(mappings, { 'src': 'D:\works\xn.static\', 'path': '/opt/static/' } )
	for mapping in mappings
		if stridx(path, mapping['src']) == 0
			let newPath = mapping['path'] . tr(strpart(path, strlen(mapping['src'])), '\', '/')
			echo newPath
			execute '!' . sfxcl . ' /rewrite always ' . path . ' /S /FED ' . newPath
			return
		endif
	endfor
endfunction 

autocmd BufWritePost,FileWritePost D:/works/xn.static/jspro/xn.core.js silent execute '!D:/works/xn.static/jspro/build.bat &'
autocmd BufWritePost,FileWritePost D:/works/xn.static/jspro/xn.ui.js silent execute '!D:/works/xn.static/jspro/build.bat &'
autocmd BufWritePost,FileWritePost D:/works/xn.static/jspro/xn.form.js silent execute '!D:/works/xn.static/jspro/build.bat &'
autocmd BufWritePost,FileWritePost D:/works/xn.static/jspro/xn.widgets.js silent execute '!D:/works/xn.static/jspro/build.bat &'

